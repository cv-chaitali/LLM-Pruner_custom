import os
import sys
import argparse
from typing import List
from pathlib import Path
from datasets import DatasetDict

import torch
import transformers
from datasets import load_dataset
from transformers import Trainer, TrainingArguments

from LLMPruner.peft import (
    LoraConfig,
    get_peft_model,
    get_peft_model_state_dict,
    prepare_model_for_int8_training,
    set_peft_model_state_dict,
)
from LLMPruner.utils.prompter import Prompter, ZeroPrompter
from LLMPruner.datasets.ppl_dataset import get_loaders
from transformers import AutoModelForCausalLM, AutoTokenizer
from datasets import load_dataset
from pathlib import Path
import json
from safetensors.torch import load_model
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt

from huggingface_hub import login

login("tpken")
device = "cuda" if torch.cuda.is_available() else "cpu"

from torch.nn import functional as F

# Load Teacher Model
teacher_tokenizer = transformers.AutoTokenizer.from_pretrained(
    "lmsys/vicuna-7b-v1.5", use_auth_token="token"
)
teacher_model = transformers.AutoModelForCausalLM.from_pretrained("lmsys/vicuna-7b-v1.5")
teacher_model.eval()  # Set teacher to evaluation mode
teacher_model.to(device)


def kd_loss(student_logits, teacher_logits, targets, alpha=0.5, temperature=2.0):
    """
    Computing KD loss here???
    elemensts 
        student_logits: Logits from the student model.
        teacher_logits: Logits from the teacher model.
        targets: GT labels. [messing up here ig]
        alpha: reg parameyers.
        temperature: for adjusting logits.
    """
    vocab_size = student_logits.size(-1)
    student_logits = student_logits.view(-1, vocab_size)  # Flatten to [batch_size * seq_len, vocab_size]
    teacher_logits = teacher_logits.view(-1, vocab_size)  # Flatten to [batch_size * seq_len, vocab_size]
    targets = targets.view(-1)  # Flatten to [batch_size * seq_len]
    #debug
    print(f"student_logits: {student_logits.shape}")
    print(f"teacher_logits: {teacher_logits.shape}")
    print(f"targets: {targets.shape}")
    # Soften logits
    student_soft_logits = F.log_softmax(student_logits / temperature, dim=-1)
    teacher_soft_logits = F.softmax(teacher_logits / temperature, dim=-1)

    # KLD
    kd_loss = F.kl_div(student_soft_logits, teacher_soft_logits, reduction="batchmean") * (temperature**2)

    ce_loss = F.cross_entropy(student_logits, targets)

    return alpha * kd_loss + (1.0 - alpha) * ce_loss



class KDTrainer(Trainer):
    def __init__(self, teacher_model=None, temperature=2.0, alpha=0.5, **kwargs):
        super().__init__(**kwargs)
        self.teacher_model = teacher_model
        self.temperature = temperature
        self.alpha = alpha

    def compute_loss(self, model, inputs, return_outputs=False):
        student_outputs = model(**inputs)
        student_logits = student_outputs.logits
        targets = inputs["labels"]

        with torch.no_grad():
            teacher_outputs = self.teacher_model(**inputs)
            teacher_logits = teacher_outputs.logits

        loss = kd_loss(student_logits, teacher_logits, targets, self.alpha, self.temperature)


        return (loss, student_outputs) if return_outputs else loss


def main(args):
    os.environ["WANDB_PROJECT"] = args.wandb_project
    pruned_dict = torch.load(args.prune_model, map_location="cpu")
    tokenizer, model = pruned_dict["tokenizer"], pruned_dict["model"]

    gradient_accumulation_steps = args.batch_size // args.micro_batch_size
    if not args.no_instruction:
        prompter = Prompter(args.prompt_template_name)
    else:
        prompter = ZeroPrompter()

    world_size = int(os.environ.get("WORLD_SIZE", 1))
    ddp = world_size != 1
    if ddp:
        gradient_accumulation_steps = gradient_accumulation_steps // world_size

    if device == "cuda":
        model.half()

    tokenizer.pad_token_id = 0
    tokenizer.padding_side = "left"

    def tokenize(prompt, add_eos_token=True):
        result = tokenizer(
            prompt,
            truncation=True,
            max_length=args.cutoff_len,
            padding=False,
            return_tensors=None,
        )
        if (
            result["input_ids"][-1] != tokenizer.eos_token_id
            and len(result["input_ids"]) < args.cutoff_len
            and add_eos_token
        ):
            result["input_ids"].append(tokenizer.eos_token_id)
            result["attention_mask"].append(1)

        result["labels"] = result["input_ids"].copy()

        return result

    def generate_and_tokenize_prompt(data_point):

        full_prompt = prompter.generate_prompt(
            data_point["instruction"],
            data_point["input"],
            data_point["output"],
        )

        tokenized_full_prompt = tokenize(full_prompt)
        if not args.train_on_inputs:
            user_prompt = prompter.generate_prompt(
                data_point["instruction"], data_point["input"] if "input" in data_point.keys() else None
            )
            tokenized_user_prompt = tokenize(user_prompt, add_eos_token=args.add_eos_token)
            user_prompt_len = len(tokenized_user_prompt["input_ids"])

            if args.add_eos_token:
                user_prompt_len -= 1

            tokenized_full_prompt["labels"] = [
                -100
            ] * user_prompt_len + tokenized_full_prompt["labels"][user_prompt_len:]
        return tokenized_full_prompt

    def split_and_tokenizer(test_data, tokenizer, seq_len, field_name):
        test_ids = tokenizer("\n\n".join(test_data[field_name]), return_tensors='pt').input_ids[0]
        nsamples = test_ids.numel() // seq_len

        test_set = []
        for i in range(nsamples):
            batch = test_ids[(i * seq_len):((i + 1) * seq_len)]
            test_set.append({
                'input_ids': batch,
                'labels': batch
            })
        return test_set

    # Prepare For LoRA
    model = prepare_model_for_int8_training(model)
    config = LoraConfig(
        r=args.lora_r,
        lora_alpha=args.lora_alpha,
        target_modules=args.lora_target_modules.split(","),
        lora_dropout=args.lora_dropout,
        bias="none",
        task_type="CAUSAL_LM",
    )
    model = get_peft_model(model, config)
    model.print_trainable_parameters()
    data = load_dataset(args.data_path)
    train_val = data["train"].train_test_split(test_size=args.val_set_size, shuffle=True, seed=42)
    train_data = train_val["train"].shuffle().map(generate_and_tokenize_prompt)
    val_data = train_val["test"].shuffle().map(generate_and_tokenize_prompt)
    
    val_data = DatasetDict({"original": val_data})  # Wrap the original val_data
    if args.extra_val_dataset:
        from LLMPruner.datasets.ppl_dataset import get_wikitext2, get_ptb

        seq_len = 512
        for extra_dataset in args.extra_val_dataset.split(','):
            if 'wikitext2' in extra_dataset:
                _, test_data = get_wikitext2(seq_len, None)
                test_data = split_and_tokenizer(test_data, tokenizer, seq_len, field_name='text')
                val_data["wikitext2"] = test_data
            elif 'ptb' in extra_dataset:
                _, test_data = get_ptb(seq_len, None)
                test_data = split_and_tokenizer(test_data, tokenizer, seq_len, field_name='sentence')
                val_data["ptb"] = test_data


    # Initialize KDTrainer
    trainer = KDTrainer(
        model=model,
        teacher_model=teacher_model,
        temperature=args.temperature,
        alpha=args.alpha,
        train_dataset=train_data,
        eval_dataset=val_data,
        args=TrainingArguments(
            per_device_train_batch_size=args.micro_batch_size,
            gradient_accumulation_steps=gradient_accumulation_steps,
            warmup_steps=100,
            num_train_epochs=args.num_epochs,
            learning_rate=args.learning_rate,
            fp16=True,
            logging_steps=10,
            evaluation_strategy="steps",
            save_strategy="steps",
            eval_steps=10,
            save_steps=20,
            output_dir=args.output_dir,
            save_total_limit=20,
            load_best_model_at_end=True,
            ddp_find_unused_parameters=None,
            group_by_length=args.group_by_length,
            save_safetensors = False,
            save_only_model = True,
            report_to="wandb",
            # metric_for_best_model="{}_loss".format(args.data_path),
            metric_for_best_model="eval_wikitext2_loss",

            run_name=args.output_dir.split("/")[-1],
        ),
        data_collator=transformers.DataCollatorForSeq2Seq(
            tokenizer, pad_to_multiple_of=8, return_tensors="pt", padding=True
        ),
    )
    trainer.train(resume_from_checkpoint=args.resume_from_checkpoint)
    model.save_pretrained(args.output_dir)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Tuning Pruned LLM with Knowledge Distillation")

    # Model Type & Path
    parser.add_argument("--prune_model", type=str, help="Pruned model path")
    parser.add_argument("--data_path", type=str, default="chaitalibh/alpaca-subset", help="Dataset path")
    parser.add_argument("--output_dir", type=str, default="./lora-alpaca", help="Output directory")

    # Training Hyperparameters
    parser.add_argument("--batch_size", type=int, default=8, help="Batch size")
    parser.add_argument("--micro_batch_size", type=int, default=4, help="Micro batch size")
    parser.add_argument("--num_epochs", type=int, default=3, help="Number of epochs")
    parser.add_argument("--learning_rate", type=float, default=1e-4, help="Learning rate")
    parser.add_argument("--cutoff_len", type=int, default=512, help="Cutoff length")
    parser.add_argument("--val_set_size", type=int, default=10, help="Validation set size")
    parser.add_argument("--temperature", type=float, default=2.0, help="KD temperature")
    parser.add_argument("--alpha", type=float, default=0.5, help="KD alpha")

    # LoRA Hyperparameters
    parser.add_argument("--lora_r", type=int, default=16, help="LoRA rank")
    parser.add_argument("--lora_alpha", type=int, default=16, help="LoRA alpha")
    parser.add_argument("--lora_dropout", type=float, default=0.05, help="LoRA dropout")
    parser.add_argument(
        "--lora_target_modules",
        type=str,
        default="q_proj,k_proj,v_proj,o_proj,gate_proj,down_proj,up_proj,ff_proj,layer_norm,attention_norm,mlp_norm",
        help="LoRA target modules",
    )
    parser.add_argument(
    '--no_instruction',
    action='store_true',
    default=True,
    help="Whether to exclude the instruction template from prompts"
    )

    # Other Arguments
    parser.add_argument("--train_on_inputs", default=False, action="store_true", help="Train on inputs or not")
    parser.add_argument("--add_eos_token", default=False, action="store_true", help="Add EOS token")
    parser.add_argument("--group_by_length", default=False, action="store_true", help="Group by length")
    parser.add_argument("--wandb_project", type=str, default="llm_lora_kd", help="Weights & Biases project name")
    parser.add_argument("--resume_from_checkpoint", type=str, help="Resume training from checkpoint")
    parser.add_argument("--extra_val_dataset", type=str, help="Comma-separated list of extra validation datasets")

    args = parser.parse_args()
    main(args)
